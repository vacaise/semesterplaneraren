---
description: The ultimate one
globs: 
alwaysApply: false
---
You're helping a frontend developer who uses:
- TypeScript and React 19 (functional components only)
- TailwindCSS and Shadcn (not Radix UI directly)
- Golang with Gin for microservice backends deployed on serverless platforms
- Cloudflare Pages for web hosting and deployment
- GitHub Actions for CI/CD pipelines

IMPORTANT: Cost optimization is a top priority. Keep costs minimal or free when possible.

Frontend guidelines:
- Always use functional components, never class components
- Use useState for simple state, useReducer for complex state, and Context API for global state - no Redux
- Follow TypeScript best practices with strict typing and avoid any type
- Prefer Shadcn UI components when available
- Structure React components to be small and focused (<250 lines)
- Use React Testing Library for frontend tests
- Optimize performance with useMemo and useCallback when appropriate
- Ensure responsive design with Tailwind's responsive utilities
- Implement proper error boundaries for component failure isolation
- Use Next.js App Router patterns if using Next.js
- Implement proper form validation with libraries like zod or yup
- Use custom hooks to extract reusable logic
- Implement proper loading states and error handling in data fetching
- Use semantic HTML elements for accessibility
- Follow WAI-ARIA practices for complex interactive components
- Use Suspense and concurrent features for improved UX
- Implement skeleton loaders for content that takes time to load
- Prefer server components where applicable in Next.js projects
- Use TypeScript utilities like Partial, Required, Pick, etc.
- Implement proper keyboard navigation for interactive elements

Backend guidelines:
- Design as microservices, not monoliths
- Use Gin framework for Golang APIs
- Follow Go best practices for error handling and interface design
- Use the standard Go testing library for backend tests
- Structure services with clean architecture principles
- Implement proper middleware for authentication and logging
- Use context for request cancellation and timeouts
- Implement proper validation for incoming requests
- Structure API responses consistently
- Use environment variables for configuration
- Implement proper logging with structured logs
- Use Go modules for dependency management
- Implement graceful shutdown for services
- Use connection pooling for database connections
- Implement proper rate limiting and timeout handling
- Use Go generics where appropriate (Go 1.18+)
- Implement circuit breakers for external service calls
- Use proper error wrapping with errors.Is and errors.As
- Implement health check endpoints for all services
- Consider implementing CQRS pattern for complex domains

Cloudflare guidelines:
- Use Cloudflare Pages for static site hosting
- Implement proper caching strategies with Cloudflare Cache
- Use Cloudflare Workers for edge computing when needed
- Configure proper security headers
- Set up proper redirects and rewrites
- Implement proper CORS settings
- Use Cloudflare Access for authentication if needed
- Implement proper environment variables in Cloudflare Pages
- Use wrangler.toml for Cloudflare Workers/Pages configuration
- Set up custom domains properly
- Use preview deployments for testing
- Implement proper HTTP headers for security
- Configure proper caching rules
- Use proper analytics for monitoring
- Implement proper error pages

Infrastructure guidelines:
- Use infrastructure as code principles
- Implement proper environment separation
- Validate input variables
- Document outputs
- Use workspaces for environment separation
- Implement proper tagging strategy for resources and cost allocation
- Use data sources over resources when possible
- Structure code in logical modules
- Implement proper dependency management
- Document module inputs and outputs thoroughly
- Use locals for repeated values
- Use dynamic blocks for repeated configurations
- Consider using DRY configurations
- Set up cost estimation workflows
- Create modules that follow cost-effective patterns

CI/CD guidelines:
- Use GitHub Actions for CI/CD pipelines (stay within free tier)
- Implement proper testing in the pipeline
- Set up separate staging and production environments
- Implement proper caching in CI/CD pipelines
- Use matrix builds for testing across environments
- Implement proper secret management in GitHub Actions
- Use reusable workflows for common patterns
- Implement proper versioning strategy
- Use environment protection rules in GitHub
- Implement proper approval process for production deployments
- Include security scanning in CI/CD pipeline
- Set up proper notifications for pipeline failures
- Implement proper cleanup for testing resources
- Consider using composite actions for common steps
- Implement automatic dependency updates with Dependabot
- Set up proper workflow triggers based on branch or tag
- Implement feature flag control in deployment process
- Use job outputs for sharing data between jobs
- Consider implementing ChatOps integration
- Implement proper deployment documentation

Performance optimization:
- Implement proper code splitting in React
- Use lazy loading for components and routes
- Optimize images and assets to reduce bandwidth costs
- Implement proper caching strategies to reduce API calls
- Use CDN efficiently with proper cache headers to reduce origin requests
- Optimize serverless function cold starts
- Use connection pooling in database connections
- Implement proper pagination for large data sets
- Use windowing libraries for long lists (react-window)
- Implement resource hints (preload, prefetch)
- Consider using WebSockets for real-time updates (monitor costs)
- Implement database query optimization techniques
- Use compression for API responses to reduce data transfer
- Consider using server-side rendering for SEO-critical pages
- Implement proper HTTP caching with ETags
- Use service workers for offline functionality
- Implement proper debouncing and throttling for user events

Security best practices:
- Implement proper authentication and authorization
- Validate all user inputs
- Protect against common web vulnerabilities (XSS, CSRF, etc.)
- Implement proper CORS settings
- Use HTTPS everywhere
- Implement proper secrets management
- Follow least privilege principle for roles
- Implement proper error handling without leaking sensitive info
- Use Content Security Policy headers
- Implement proper session management
- Regularly update dependencies
- Implement proper logging without sensitive data
- Scan code for security vulnerabilities
- Implement proper API authentication
- Use signed URLs for sensitive content
- Implement proper password hashing if applicable
- Use security headers (X-Content-Type-Options, X-Frame-Options, etc.)
- Implement proper rate limiting
- Consider implementing JWTs with proper expiration
- Use OAuth2 flows correctly
- Implement proper token validation
- Consider implementing MFA for sensitive operations
- Follow OWASP security guidelines

Code quality:
- Prioritize code readability
- Don't over-engineer solutions
- Document complex logic
- Follow consistent naming conventions
- Implement proper error handling
- Write comprehensive tests with good coverage
- Use ESLint and Prettier for code formatting
- Use Go linting tools
- Follow idiomatic patterns for each language
- Implement proper code reviews
- Keep functions and methods small and focused
- Use meaningful comments
- Avoid magic numbers and strings
- Use descriptive variable and function names
- Structure code in logical modules and packages
- Use storybook for UI component documentation
- Implement proper documentation generation
- Consider using architectural decision records (ADRs)
- Use code complexity metrics to identify problematic code
- Implement proper API documentation with OpenAPI/Swagger

Debugging and monitoring:
- Set up proper logging with contextual information
- Implement distributed tracing cautiously (costs money)
- Use structured logging format
- Set up proper alerting for critical issues
- Implement proper error tracking
- Use debugging tools effectively
- Set up performance monitoring (cautious of costs)
- Implement proper logging levels
- Set up proper metrics collection within free tier limits
- Implement proper correlation IDs for request tracing
- Consider implementing feature flags for easier debugging
- Set up proper development environment with debugging tools
- Document common debugging workflows

Data handling:
- Implement proper data validation
- Use proper data structures for different needs
- Implement proper error handling for data operations
- Use proper serialization and deserialization
- Implement proper pagination for large datasets
- Use proper database indexing
- Implement proper caching strategies to reduce database calls
- Consider data privacy implications
- Implement proper data backup and recovery within free tier
- Use proper data encryption
- Consider data retention policies to minimize storage costs
- Implement proper database migrations
- Use proper data access patterns
- Consider data consistency requirements
- Implement proper data versioning if needed